#!/bin/sh
#
# Configure script for Nux Utilities
#

config_files="Makefile lib/Makefile"
CC_list="gcc clang cc"
configure_options="$@"

subst_variables="CC
CFLAGS
CPPFLAGS
AR
VERSION
builddir
srcdir
top_srcdir
prefix
exec_prefix
bindir
sbindir
sysconfdir
libdir
includedir
datarootdir
mandir
program_prefix
build
host
host_cpu"

#
# Default values
#
srcdir=
top_srcdir=
builddir=
prefix=/usr/local
exec_prefix='${prefix}'
bindir='${exec_prefix}/bin'
sbindir='${exec_prefix}/sbin'
sysconfdir='${prefix}/etc'
libdir='${exec_prefix}/lib'
includedir='${prefix}/include'
datarootdir='${prefix}/share'
mandir='${datarootdir}/man'
program_prefix=
build=
host=
host_cpu=

CONFTEST=conftest.c

#
# Helper functions
#
usage() {
cat << EOF
Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g. CC, CFLAGS, etc), specify them as
VAR=VALUE. See below for descriptions of some of the useful variables.

Defaults for options are specified in brackets.

Installation directories:
  --prefix=PREFIX	architecture-independent installation prefix
			[/usr/local]
  --exec-prefix=EPREFIX	architecture-dependent installation prefix [PREFIX]

Fine tuning of the installation directories:
  --bindir=DIR		user executables [EPREFIX/bin]
  --sbindir=DIR		system manager executables [EPREFIX/sbin]
  --sysconfdir=DIR	read-only single-machine data [PREFIX/etc]
  --libdir=DIR		object code libraries [EPREFIX/lib]
  --includedir=DIR	include files [PREFIX/include]
  --datarootdir=DIR	read-only architecture-independent data root
			[PREFIX/share]
  --mandir=DIR		man documentation [DATAROOTDIR/man]

Program names:
  --program-prefix=PREFIX	prepend PREFIX to the installed program names

System types:
  --build=BUILD		configure for building on BUILD [guessed]
  --host=HOST		cross-compile to run on HOST [BUILD]

Some influential environment variables:
  CC		C compiler command [detected]
  CFLAGS	C compiler flags, e.g. -Werror
  CPPFLAGS	C preprocessor flags, e.g. -I<include dir>
  AR		Archiver command [detected]

Use these variables to override the choices made by 'configure'.
EOF
}

msg_error() {
	printf "%s: %s\n" "$0" "$*"
	exit 1
}

msg_checking() {
	printf "checking %s... " "$*"
}

msg_result() {
	printf "%s\n" "$*"
}

check_tool() {
# $1 -> variable name
# $2 -> program to check for
	tool_name="$2"
	if test -n "$host"; then
		tool_name="${host}-${tool_name}"
	fi
	if type "${tool_name}" > /dev/null 2>&1; then
		eval "$1=\"\${tool_name}\""
	else
		eval "$1=\"unknown\""
	fi
}

run_cmd() {
	$1 > /dev/null 2>&1
}

add_cflag() {
	msg_checking "whether compiler accepts $1"
	cat << EOF > $CONFTEST
int main (void) {
	return 0;
}
EOF
	if $CC $CFLAGS $1 -c -o /dev/null $CONFTEST > /dev/null 2>&1 ; then
		msg_result "yes"
		CFLAGS="$CFLAGS $1"
		eval "CFLAGS=\${CFLAGS# }"
	else
		msg_result "no"
		msg_error "compiler does not accept $1"
	fi
	rm -f $CONFTEST
}

create_file() {
	printf "creating %s\n" "$*"
}

#
# Start of script
#
for arg ; do
	case "$arg" in
		--help|-h) usage; exit 0 ;;
		--prefix=*) prefix=${arg#*=} ;;
		--exec-prefix=*) exec_prefix=${arg#*=} ;;
		--bindir=*) bindir=${arg#*=} ;;
		--sbindir=*) sbindir=${arg#*=} ;;
		--sysconfdir=*) sysconfdir=${arg#*=} ;;
		--libdir=*) libdir=${arg#*=} ;;
		--includedir=*) includedir=${arg#*=} ;;
		--datarootdir=*) datarootdir=${arg#*=} ;;
		--mandir=*) mandir=${arg#*=} ;;
		--program-prefix=*) program_prefix=${arg#*=} ;;
		--build=*) build=${arg#*=} ;;
		--host=*) host=${arg#*=} ;;
		-*) msg_error "unknown option '$arg'"; exit 1 ;;
		CC=*) CC=${arg#*=} ;;
		CFLAGS=*) CFLAGS=${arg#*=} ;;
		CPPFLAGS=*) CPPFLAGS=${arg#*=} ;;
		AR=*) AR=${arg#*=} ;;
		*=*) ;;
		*) msg_error "unknown argument '$arg'" ;;
	esac
done

#
# Get the source dir for out-of-tree builds
#
top_srcdir="${0%/configure}"
abs_srcdir="$(cd $top_srcdir && pwd)" || msg_error "invalid source directory '$top_srcdir'"
if test "$abs_srcdir" = "$(pwd)"; then
	top_srcdir="."
fi
builddir="."

#
# Find an appropriate C compiler
#
msg_checking "for compiler"
if test -z $CC; then
	for tryCC in $CC_list; do
		check_tool "CC" "$tryCC"
		if test "x$CC" != "xunknown"; then
			break
		fi
	done
fi
msg_result "$CC"
if test "x$CC" = "xunknown"; then
	msg_error "could not find a supported compiler"
fi

#
# Check that the compiler can actually assemble programs
#
msg_checking "whether the compiler works"
cat << EOF > $CONFTEST
int main (void) {
	return 0;
}
EOF
if run_cmd "$CC -c -o /dev/null $CONFTEST" ; then
	msg_result "yes"
else
	msg_result "no"
	msg_error "compiler cannot create executables"
fi
rm -f $CONFTEST

#
# Check other tools
#
msg_checking "for ar"
check_tool "AR" "ar"
msg_result "$AR"
if test "x$AR" = "xunknown"; then
	msg_error "could not find ranlib"
fi

#
# Check the host architecture
#
msg_checking "host system type"
if test -z "$host"; then
	host=$($CC -dumpmachine 2> /dev/null) || host="unknown"
fi
msg_result "$host"

case $host in
	x86_64-*) host_cpu="x86_64" ;;
	unknown) msg_error "unable to detect host architecture; try $0 --host=..." ;;
	*) msg_error "unknown or unsupported host '$host'" ;;
esac

#
# Miscellaneous checks
#
add_cflag "-Wall"
add_cflag "-Werror"

VERSION=$(cat ${top_srcdir}/Version)

for config_file in $config_files; do
	create_file "$config_file"
	subdir="$(dirname $config_file)"
	if test ! -d $subdir; then
		mkdir -p $subdir
	fi
	for subst_var in $subst_variables; do
		eval "subst_val=\"\${$subst_var}\""
		subst_val=$(echo $subst_val | sed 's/\//\\\//g')
		sed_scripts="$sed_scripts s/@${subst_var}@/${subst_val}/g; "
	done
	sed "$sed_scripts" $top_srcdir/$config_file.in > $builddir/$config_file
done
